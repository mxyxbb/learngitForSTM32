C51 COMPILER V9.01   MAIN                                                                  04/01/2012 00:34:00 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg51.h>
   2          #include <stdio.h>
   3          #include <i2c.h>
   4          
   5          #define uchar unsigned char
   6          #define WRITE 0xA0                       /* 定义24C04的器件地址SLA和方向位W */
   7          #define READ 0xA1                        /* 定义24C04的器件地址SLA和方向位R */
   8          #define BLOCK_SIZE 32                    /* 定义指定字节个数 */
   9          #define FALSE 0
  10          #define TRUE ~FALSE
  11          
  12          xdata uchar EAROMImage[BLOCK_SIZE];/* 在外部RAM中定义存储映象单元 */
  13          
  14          /****************************************************************************
  15          *    函数原型: bit E_address(uchar Address);
  16          *    功    能: 向24C04写入器件地址和一个指定的字节地址。
  17          *****************************************************************************/
  18          bit E_address( uchar Address ) {
  19   1              I_start() ;
  20   1              if ( I_send( WRITE ) )
  21   1                      return ( I_send( Address ) ) ;
  22   1              else
  23   1                      return ( FALSE ) ;
  24   1      }
  25          
  26          /****************************************************************************
  27          *    函数原型: bit E_read_block(void);
  28          *    功    能: 从24C04中读取BLOCK_SIZE个字节的数据并转存于外部RAM存储映象
  29          *              单元, 采用序列读操作方式从片内0地址开始连续读取数据。如果
  30          *              24C04不接受指定的地址则返回0(FALSE)。
  31          *****************************************************************************/
  32          bit E_read_block( void ) {
  33   1              uchar i ;
  34   1              /* 从地址0开始读取数据 */
  35   1              if ( E_address( 0 ) ) {
  36   2                      /* 发送重复启动信号 */
  37   2                      I_start() ;
  38   2                      if ( I_send( READ ) ) {
  39   3                              for ( i=0 ; i<=BLOCK_SIZE ; i++ ) {
  40   4      
  41   4                                      EAROMImage[i] = ( I_receive() ) ;
  42   4                                      if ( i != BLOCK_SIZE ) I_Ack() ;
  43   4                                      else {
  44   5                                              I_clock() ;
  45   5                                              I_stop() ;
  46   5                                      }
  47   4                              }
  48   3                              return ( TRUE ) ;
  49   3                      }
  50   2                      else {
  51   3                              I_stop() ;
  52   3                              return ( FALSE ) ;
  53   3                      }
  54   2              }
  55   1              else
C51 COMPILER V9.01   MAIN                                                                  04/01/2012 00:34:00 PAGE 2   

  56   1                      I_stop() ;
  57   1                      return ( FALSE ) ;
  58   1      }
  59          
  60          /****************************************************************************
  61          *    函数原型: void wait_5ms(void);
  62          *    功    能: 提供5ms延时(时钟频率为12MHz)。
  63          *****************************************************************************/
  64          void wait_5ms( void ) {
  65   1              int i ;
  66   1              for ( i=0 ; i<1000 ; i++ ) {
  67   2                      ;
  68   2              }
  69   1      }
  70          
  71          /****************************************************************************
  72          *    函数原型: bit E_write_block(void);
  73          *    功    能: 将外部RAM存储映象单元中的数据写入到24C04的头BLOCK_SIZE个字节。
  74          *              采用字节写操作方式, 每次写入时都需要指定片内地址。如果24C04
  75          *              不接受指定的地址或某个传送的字节未收到应答信号ACK, 则返回0
  76          *              (FALSE)。
  77          *****************************************************************************/
  78          bit E_write_block( void ) {
  79   1              uchar i ;
  80   1              for ( i=0 ; i<=BLOCK_SIZE ; i++ ) {
  81   2                      if ( E_address(i) && I_send( EAROMImage[i] ) ) {
  82   3                              I_stop() ;
  83   3                              wait_5ms();
  84   3                      }
  85   2                      else
  86   2                              return ( FALSE ) ;
  87   2              }
  88   1              return ( TRUE ) ;
  89   1       }
  90          
  91          void  main() {
  92   1          SCON = 0x5a;        
  93   1          TMOD = 0x20;  
  94   1          TCON = 0x69;  
  95   1          TH1 =  0xfd; 
  96   1              I_init();                         /* I2C 总线初始化 */
  97   1              if (E_write_block())
  98   1                       printf("write I2C good.\r\n");
  99   1              else
 100   1                       printf("write I2C bad.\r\n");
 101   1              if (E_read_block()) 
 102   1                      printf("read I2C good.\r\n");
 103   1              else
 104   1                       printf("read I2C bad.\r\n");
 105   1              while(1);
 106   1      }
 107                          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    214    ----
   CONSTANT SIZE    =     68    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.01   MAIN                                                                  04/01/2012 00:34:00 PAGE 3   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
